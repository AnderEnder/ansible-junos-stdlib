#!/usr/bin/env python2.7

DOCUMENTATION = '''
---
module: junos_install_os
version_added: 0.1.5
short_description: Junos OS software installer
description:
   - Fun with Junos
author: Jeremy Schulman
'''
import sys
import logging

sys.path.insert(0,'/home/jeremy/Python/py-junos-eznc/lib')
from jnpr.junos import Device 

EXAMPLES = '''
TBD
'''

def junos_install_os(module, dev):
  args = module.params

  ### -------------------------------------------------------------------------
  ### logging
  ### -------------------------------------------------------------------------

  logfile = args['logfile']
  if logfile is not None:
    logging.basicConfig(filename=logfile, level=logging.INFO,
      format='%(asctime)s:%(name)s:%(message)s')
    logging.getLogger().name = args['host']
    def do_log(msg, level='info'):
      getattr(logging,level)(msg)
  else:
    def do_log(msg): pass

  ### -------------------------------------------------------------------------
  ### check installed version against desired version
  ### -------------------------------------------------------------------------

  if args['version'] is None:
    # extract version string from package file
    m = re.search('-([^\\-]*)-domestic.*',args['package'])
    args['version'] = m.group(1)

  has_ver = dev.facts['version']
  should_ver = args['version']
  need_upgrade = bool(has_ver != should_ver)

  results = dict(changed=need_upgrade, ver=dict(has=has_ver,should=should_ver)) 

  if need_upgrade is False:
    do_log("No need to perform upgrade: {}".format( has_ver ))
    return results
  if module.check_mode is True:
    return results

  ### -------------------------------------------------------------------------
  ### proceeed with software install
  ### -------------------------------------------------------------------------

  from jnpr.junos.utils.sw import SW 
  sw = SW(dev)

  package = args['package']
  do_log("Starting the software upgrade process: {}".format(package))

  def update_my_progress(dev, report):
    # log the progress of the installing process
    do_log(report)

  sw_args = dict(progress=update_my_progress)
  sw_args['no_copy'] = module.boolean(args['no_copy'])
  ok = sw.install(package, **sw_args)

  if ok is not True:
    results['failed'] = True
    results['msg'] = "Unable to install the software"
    do_log(results['msg'], level='error')
    return results

  ### -------------------------------------------------------------------------
  ### reboot the box if desired
  ### -------------------------------------------------------------------------

  if module.boolean(args['reboot']) is True:
    do_log("<REBOOT>")
    rsp = sw.reboot()  

  ### -------------------------------------------------------------------------
  ### all done.
  ### -------------------------------------------------------------------------
  do_log("upgrade completed.")
  return results


def main():
  module = AnsibleModule(
    argument_spec = dict(
      host=dict(required=True),
      package=dict(required=True),      
      user=dict(required=False, default=os.getenv('USER')),
      passwd=dict(required=False, default=None),
      version=dict(required=False, default=None),
      no_copy=dict(required=False, choices=BOOLEANS, default=False),
      reboot=dict(required=False, choices=BOOLEANS, default=True),
      logfile=dict(required=False, default=None)
    ),
    supports_check_mode = True
  )

  args = module.params
  dev = Device(args['host'], user=args['user'], password=args['passwd'])
  dev.open()

  results = junos_install_os(module, dev)

  dev.close()
  module.exit_json(**results)

from ansible.module_utils.basic import *
main()

