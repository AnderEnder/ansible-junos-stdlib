#!/usr/bin/env python2.7

DOCUMENTATION = '''
---
module: junos_zeroize
author: Jeremy Schulman, Juniper Networks
version_added: "1.5.0"
short_description: Zeroize Junos system
description:
    - Remove all configuration information on the Routing Engines and 
      reset all key values. The command removes all data files, including 
      customized configuration and log files, by unlinking the files from 
      their directories.
requirements:
    - py-junos-eznc >= 0.0.5
    - netconify, if using I(console) option
options:
    host:
        description:
            - should be {{ inventory_hostname }}
        required: false   
    user:
        description:
            - login user-name 
        required: false 
        default: $USER 
    passwd:
        description:
            - login password
        required: false 
        default: assumes ssh-key active   
    console:
        description:
            - SERIAL or TERMINAL-SERVER port setting, per use with
              the B(netconify) utility
        required: false
        default: None
        notes:
            - ex: "--telnet=termserv101,2000"
    zeroize:
        description:
            - safety mechanism, you B(MUST) set this to 'zeroize'
        required: yes
        default: None
    logfile:
        description:
            - path on the local server where progress status is logged
              for debugging purposes
        required: false 
        default: None        
notes:
    - You B(MUST) either use the I(host) option or the I(port) option to designate
      how the device is accessed.
'''

EXAMPLES = '''
- junos_zeroize:
    host={{ inventory_hostname }}
    zeroize="zeroize"
'''

import sys, os
import logging

def main():
    module = AnsibleModule(
        argument_spec = dict(
            zeroize=dict(required=True, default=None),  # must be set to 'zeroize'      
            host=dict(required=False, default=None),    # host or ipaddr
            console=dict(required=False, default=None),     # param to netconify
            user=dict(required=False, default=os.getenv('USER')),
            passwd=dict(required=False, default=None),
            logfile=dict(required=False, default=None)),
        supports_check_mode = False )

    args = module.params

    if args['zeroize'] != 'zeroize':
        results = dict(changed=False, failed=True)
        results['msg'] = "You must set 'zeroize=zeroize' ({})".format(args['zeroize'])
        module.exit_json(**results)
        #
        # ! UNREACHABLE

    results = {}

    logfile = module.params['logfile']
    if logfile is not None:
        logging.basicConfig(filename=logfile, level=logging.INFO,
            format='%(asctime)s:%(name)s:%(message)s')
        logging.getLogger().name = 'NETCONIFY:'+module.params['host']
        def log_notify(event,message):
            logging.info("%s:%s"%(event,message))
        use_notifier = log_notify
    else:
        def silent_notify(event,message): pass
        use_notifier = silent_notify    

    if args.get('console') is None:
        from jnpr.junos import Device 
        dev = Device(args['host'], user=args['user'], password=args['passwd'])
        dev.open()
        dev.cli('request system zeroize')
        results['changed'] = True
        # no close, we're done after this point.
    else:
        from netconify.cmdo import netconifyCmdo
        nc_args = []
        nc_args.append( args['console'] )
        nc_args.append( '--zeroize=zeroize')
        if args['user'] is not None: nc_args.append('--user='+args['user'])
        if args['passwd'] is not None: nc_args.append('--passwd='+args['passwd'])

        nc = netconifyCmdo(notify=use_notifier)
        nc.run( nc_args )
        results['changed'] = True 
        use_notifier('DONE','OK')

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()

