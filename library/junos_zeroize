#!/usr/bin/env python2.7

DOCUMENTATION = '''
---
module: junos_zeroize
author: Jeremy Schulman, Juniper Networks
version_added: "1.5.0"
short_description: Zeroize Junos system
description:
    - Remove all configuration information on the Routing Engines and 
    -  reset all key values. The command removes all data files, 
    -  including customized configuration and log files, by unlinking
    -  the files from their directories.
requirements:
    - py-junos-eznc >= 0.0.5
    - netconify, if using I(port) option
options:
    host:
        description:
            - should be {{ inventory_hostname }}
        required: false   
    user:
        description:
            - login user-name 
        required: false 
        default: $USER 
    passwd:
        description:
            - login password
        required: false 
        default: assumes ssh-key active   
    port:
        description:
            - SERIAL or TERMINAL-SERVER port setting, per use with
              the B(netconify) utility
        required: false
        default: None
    zeroize:
        description:
            - safety mechanism, you B(MUST) set this to 'zeroize'
        required: yes
        default: None
notes:
    - You B(MUST) either use the I(host) option or the I(port) option to designate
      how the device is accessed.
'''

EXAMPLES = '''
- junos_zeroize:
    host={{ inventory_hostname }}
    zeroize="zeroize"
'''

import sys
sys.path.insert(0,'/home/jeremy/Python/py-junos-netconify/lib')

def main():
  module = AnsibleModule(
    argument_spec = dict(
      zeroize=dict(required=True, default=None),  # must be set to 'zeroize'      
      host=dict(required=False, default=None),    # host or ipaddr
      tty=dict(required=False, default=None),     # param to netconify
      user=dict(required=False, default=None),
      passwd=dict(required=False, default=None),
    ),
    supports_check_mode = False
  )

  args = module.params

  if args['zeroize'] != 'zeroize':
    results = dict(changed=False, failed=True)
    results['msg'] = "You must set 'zeroize=zeroize' ({})".format(args['zeroize'])
    module.exit_json(**results)

  results = {}

  if args.get('host') is not None:
    from jnpr.junos import Device 
    dev = Device(args['host'], user=args['user'], password=args['passwd'])
    dev.open()
    dev.cli('request system zeroize')
    results['changed'] = True
    # no close, we're done after this point.
  elif args['port'] is not None:
    from netconify.cmdo import netconifyCmdo
    nc_args = []
    nc_args.append( args['port'] )
    nc_args.append( '--zeroize=zeroize')
    if args['user'] is not None: nc_args.append('-u='+args['user'])
    if args['passwd'] is not None: nc_args.append('--passwd='+args['passwd'])
    def silent(event,message):pass
    nc = netconifyCmdo(notify=silent)
    nc.run( nc_args )
    results['changed'] = True 
  else:
      results['failed'] = True
      results['msg'] = "You must provide etierh 'host' or 'port' option"

  module.exit_json(**results)

from ansible.module_utils.basic import *
main()

