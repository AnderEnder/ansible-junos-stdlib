#!/usr/bin/env python2.7

DOCUMENTATION = '''
---
module: junos_shutdown
author: Jeremy Schulman, Juniper Networks
version_added: "1.6.0"
short_description: Shutdown or Reboot the Junos device
description:
    - Used to shutdown (power-off) or reboot the Junos device; includes
    - all routing-engines (REs) in a virtual-chassis or a dual-RE system.
requirements:
    - py-junos-eznc >= 0.0.5
options:
    host:
        description:
            - should be {{ inventory_hostname }}
        required: true  
    user:
        description:
            - login user-name 
        required: false 
        default: $USER 
    passwd:
        description:
            - login password
        required: false 
        default: assumes ssh-key active   
    reboot:
        description:
            - if B(yes) then the device will be rebooted rather than power-off
        required: false 
        default: no
        choices: ['yes','no']
    shutdown:
        description:
            - safety mechanism, you B(MUST) set this to 'shutdown'
        required: yes
        default: None
'''

EXAMPLES = '''
- junos_shutdown:
    host={{ inventory_hostname }}
    shutdown="shutdown"
    reboot=yes
'''

from jnpr.junos import Device
from jnpr.junos.utils.sw import SW

def main():

    module = AnsibleModule(
        argument_spec = dict(
            shutdown=dict(required=True, default=None),   # must be set to 'shutdown'      
            host=dict(required=True, default=None),       # host or ipaddr
            user=dict(required=False, default=os.getenv('USER')),
            passwd=dict(required=False, default=None),
            reboot=dict(required=False, choices=BOOLEANS, default=False)),
        supports_check_mode = False )

    args = module.params
    if args['shutdown'] != 'shutdown':
        module.fail_json(msg='Say "shutdown" to proceed')    

    restart_mode = module.boolean(args['reboot'])

    try:
        dev = Device(args['host'], user=args['user'], password=args['passwd']).open()
    except Exception as err:
        module.fail_exit(msg='unable to open NETCONF')
        #
        # --- UNREACHABLE ---

    results = {'changed': True, 'reboot': restart_mode}        

    if restart_mode is True:
        SW(dev).reboot(0)
    else:
        SW(dev).poweroff(0)

    # dev.close isn't performed since the device will 
    # be in the process of shutting down and we'll 
    # lose connectivity anyways ...

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()

