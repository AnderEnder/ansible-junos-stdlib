#!/usr/bin/env python2.7

DOCUMENTATION = '''
---
module: junos_console_devicemode
author: Jeremy Schulman, Juniper Networks
version_added: "1.5.0"
short_description: Shutdown or Reboot the Junos device
description:
    - New Out of Box (NOOB) console configuration that will change the "device mode". 
      For QFX devices in QFabric deployments, the QFX switch must be 
      configured into 'node' mode. This action is performed over the device 
      CONSOLE port using either a SERIAL-PORT or a TERMINAL-SERVER. 
      This action will also log the device "facts" and "inventory" to a 
      local server directory, which then provdies you with specific details 
      about the device located on that console. Refer to netconify for 
      further details on this process.
requirements:
    - netconify
options:
    name:
        description:
            - should be {{ inventory_hostname }}
        required: true  
    user:
        description:
            - login user-name 
        required: false 
        default: root 
    passwd:
        description:
            - login password
        required: false 
        default: None   
    port:
        description:
            - CONSOLE port, per the B(netconify) utility
        required: true
        default: None
    qfx:
        description:
            - determine the QFX device mode
        required: true
        choices: ['node','switch']
        default: node        
    logfile:
        description:
            - path on the local server where progress status is logged
              for debugging purposes
        required: false 
        default: None
    savedir:
        description:
            - path to the local server directory where device facts and 
              inventory files will be stored. Refer to the B(netconify) 
              utility for details.  If the path is not explicit, it will
              be local to the playbook execution directory
        required: false 
        default: None
'''

EXAMPLES = '''
- junos_console_devicemode:
    name={{ inventory_hostname }}
    port='-t={{TERMSERV}},{{TERMSERVPORT}}'
    qfx=node
    logfile=/usr/local/junos/logs/qfx_node.log
    savedir=/usr/local/junos/inventory
'''

import sys
import logging

from netconify.cmdo import *

def main():
  module = AnsibleModule(
    argument_spec = dict(
      port=dict(required=True),
      name=dict(required=True),
      qfx=dict(required=False, default=None, choices=['node','switch']),
      logfile=dict(required=False, default=None),
      savedir=dict(required=False),
      user=dict(required=False, default='root'),
      passwd=dict(required=False, default=None)
    ),
    supports_check_mode = True
  )

  # -----------------------------------------------
  # build the command args to the netconify utility
  # -----------------------------------------------

  args = []

  args.append(module.params['port'])
  if module.params['mode'] is not None:
    args.append('--qfx-'+module.params['mode'])
  if module.params['savedir'] is not None:
    args.append('--facts')
    args.append('--savedir='+module.params['savedir'])
  if module.params['user'] is not None:
    args.append('--user='+module.params['user'])
  if module.params['passwd'] is not None:
    args.append('--passwd='+module.params['passwd'])

  # the final arg should be the name we designate to this device.  
  args.append(module.params['name'])  

  logfile = module.params['logfile']
  if logfile is not None:
    logging.basicConfig(filename=logfile, level=logging.INFO,
      format='%(asctime)s:%(name)s:%(message)s')
    logging.getLogger().name = 'NETCONIFY:'+module.params['name']
    def log_notify(event,message):
      log_notify.event = event
      log_notify.message = message
      logging.info("%s:%s"%(event,message))
    use_notifier = log_notify
  else:
    def silent_notify(event,message): pass
    use_notifier = silent_notify

  nc = netconifyCmdo(notify=use_notifier)
  rc = nc.run( args )

  results = dict(changed=nc.changed)
  results['args'] = args  # just for debug really.
  if rc is False: 
    results['failed'] = True
    results['msg'] = log_notify.message

  module.exit_json(**results)

from ansible.module_utils.basic import *
main()

