#!/usr/bin/env python2.7

DOCUMENTATION = '''
---
module: junos_console_config
author: Jeremy Schulman, Juniper Networks
version_added: "1.5.0"
short_description: Install Junos Config over CONSOLE port
description:
  - Install a minimal New Out of Box (NOOB) configuration that should 
    at least set the IP-address and enable the NETCONF service. This 
    action is performed over the device CONSOLE port using either a 
    SERIAL or a TERMINAL-SERVER. This action will also log the 
    device "facts" and "inventory" to a local server directory, 
    which then provdies you with specific details about the device 
    located on that console. Refer to netconify for further details on 
    this process.
requirements:
    - netconify
options:
    host:
        description:
            - should be {{ inventory_hostname }}
        required: true  
    user:
        description:
            - login user-name 
        required: false 
        default: root 
    passwd:
        description:
            - login password
        required: false 
        default: None   
    console:
        description:
            - port configuration per the B(netconify) utility
        required: true
        default: None
    file:
        description:
            - path to file that contains the Junos NOOB configuration
        required: true
    logfile:
        description:
            - path on the local server where progress status is logged
              for debugging purposes
        required: false 
        default: None
    savedir:
        description:
            - path to the local server directory where device facts and 
              inventory files will be stored. Refer to the B(netconify) 
              utility for details.
        required: false 
        default: None
'''

EXAMPLES = '''
- junos_console_config:
    name={{ inventory_hostname }}
    file=build/{{inventory_hostname}}.conf
    console="--telnet={{TERMSERV}},{{TERMSERVPORT}}"
'''

import sys
import logging

from netconify.cmdo import *

def main():
    module = AnsibleModule(
        argument_spec = dict(
            console=dict(required=True),
            host=dict(required=True),
            file=dict(required=True),
            logfile=dict(required=False, default=None),
            savedir=dict(required=False),
            user=dict(required=False, default='root'),
            passwd=dict(required=False, default=None)),
        supports_check_mode = False )

    args = []
    args.append(module.params['console'])
    args.append('-j=' + module.params['file'])
    if module.params['savedir'] is not None:
        args.append('--savedir='+module.params['savedir'])
    if module.params['user'] != 'root':
        args.append('--user='+module.params['user'])        
    if module.params['passwd'] is not None:
        args.append('--passwd='+module.params['passwd'])

    args.append(module.params['host'])

    logfile = module.params['logfile']
    if logfile is not None:
        logging.basicConfig(filename=logfile, level=logging.INFO,
            format='%(asctime)s:%(name)s:%(message)s')
        logging.getLogger().name = 'NETCONIFY:'+module.params['host']
        def log_notify(event,message):
            logging.info("%s:%s"%(event,message))
        use_notifier = log_notify
    else:
        def silent_notify(event,message): pass
        use_notifier = silent_notify

    nc = netconifyCmdo(notify=use_notifier)
    nc.run( args )
    results = dict(changed=nc.changed)

#    results['args'] = args

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()

