#!/usr/bin/env python2.7

DOCUMENTATION = '''
---
module: junos_install_config
version_added: 0.1.5
short_description: Junos config installer (NETCONF)
description:
   - Fun with Junos
author: Jeremy Schulman
'''
import sys
import logging

# the following is a hack, and should be removed once the jnpr.junos
# module is properly installed in the system

sys.path.insert(0,'/home/jeremy/Python/py-junos-eznc/lib')
from jnpr.junos import Device 

EXAMPLES = '''
TBD
'''

import os
from jnpr.junos.utils.config import Config

def junos_install_config(module, dev):
  args = module.params
  cu = Config(dev)

  results = {}

  file_path = module.params['file']
  file_path = os.path.abspath( file_path )

  results['file'] = file_path
  
  logging.info("pushing file: {}".format(file_path))
  try:
    logging.info("taking lock")
    cu.lock()
    try:
      # load the config.  the cu.load will raise
      # an exception if there is even a warning.
      # so we want to avoid that condition.
      logging.info("loading config")    
      cu.load(path=file_path)    
    except Exception as err:
      if err.rsp.find('.//ok') is None:
        raise err
      else:
        pass
    logging.info("committing change, please be patient")    
    cu.commit()
    logging.info("unlocking")        
    cu.unlock()
  except Exception as err:
    results['failed'] = True
    msg = "Unable to mkae changes"
    results['msg'] = msg
  else:
    logging.info("change completed")    
    results['changed'] = True

  return results

### ---------------------------------------------------------------------------
### MAIN
### ---------------------------------------------------------------------------

def main():
  module = AnsibleModule(
    argument_spec = dict(
      host=dict(required=True),
      user=dict(required=False, default=os.getenv('USER')),
      passwd=dict(required=False, default=None),
      file=dict(required=True),
      override=dict(required=False, default=False),
      logfile=dict(required=False, default=None),
      timeout=dict(required=False, default=False)
    ),
    supports_check_mode = True
  )

  args = module.params

  logfile = module.params.get('logfile')
  if logfile is not None:
    logging.basicConfig(filename=logfile, level=logging.INFO,
      format='%(asctime)s:%(name)s:%(message)s')
    logging.getLogger().name = 'CONFIG:'+module.params['host']

  logging.info("connecting to host: {}@{}".format(args['user'], args['host']))
  dev = Device(args['host'], user=args['user'], password=args['passwd'])
  dev.open()

  if args.get('timeout') is not False:
    dev.timeout = int(args['timeout'])

  results = junos_install_config(module, dev)

  dev.close()
  module.exit_json(**results)

from ansible.module_utils.basic import *
main()

