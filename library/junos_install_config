#!/usr/bin/env python2.7

DOCUMENTATION = '''
---
module: junos_install_config
version_added: 0.1.5
short_description: Junos config installer (NETCONF)
description:
   - Fun with Junos
author: Jeremy Schulman
'''

import logging
from os.path import isfile
from jnpr.junos import Device 
from jnpr.junos.exception import *

EXAMPLES = '''
TBD
'''

import os
from jnpr.junos.utils.config import Config

def junos_install_config(module, dev):
  args = module.params
  cu = Config(dev)

  results = {}

  file_path = module.params['file']
  file_path = os.path.abspath( file_path )

  results['file'] = file_path
  results['changed'] = False
  
  logging.info("pushing file: {}".format(file_path))
  try:
    logging.info("taking lock")
    cu.lock()

    try:
      # load the config.  the cu.load will raise
      # an exception if there is even a warning.
      # so we want to avoid that condition.
      logging.info("loading config")    
      cu.load(path=file_path)    
    except Exception as err:
      if err.rsp.find('.//ok') is None:
        rpc_msg = err.rsp.findtext('.//error-message')
        logging.error("unable to load config:{}".format(rpc_msg))
        raise err
      else:
        pass

    diff = cu.diff()
    if diff is not None:
      logging.info("committing change, please be patient")    
      cu.commit()
      results['changed'] = True

    logging.info("unlocking")        
    cu.unlock()
    logging.info("change completed")    

  except LockError:
    results['failed'] = True
    msg = "Unable to lock configuration"
    results['msg'] = msg
    logging.error(msg)

  except CommitError:
    results['failed'] = True
    msg = "Unable to commit configuration"
    results['msg'] = msg
    logging.error(msg)

  except Exception as err:
    results['failed'] = True
    msg = "Unable to make changes"
    results['msg'] = msg
    logging.error(msg)

  return results

### ---------------------------------------------------------------------------
### MAIN
### ---------------------------------------------------------------------------

def main():
  module = AnsibleModule(
    argument_spec = dict(
      host=dict(required=True),
      user=dict(required=False, default=os.getenv('USER')),
      passwd=dict(required=False, default=None),
      file=dict(required=True),
      override=dict(required=False, default=False),
      logfile=dict(required=False, default=None),
      timeout=dict(required=False, default=0)
    ),
    supports_check_mode = True
  )

  args = module.params

  logfile = module.params.get('logfile')
  if logfile is not None:
    logging.basicConfig(filename=logfile, level=logging.INFO,
      format='%(asctime)s:%(name)s:%(message)s')
    logging.getLogger().name = 'CONFIG:'+module.params['host']

  # ------------------------------
  # make sure file actually exists
  # ------------------------------
  if not isfile(args['file']):
    module.fail_json(msg="file not found: {}".format(args['file']))
    return

  logging.info("connecting to host: {}@{}".format(args['user'], args['host']))
  try:
    dev = Device(args['host'], user=args['user'], password=args['passwd'])    
    dev.open()
  except:
    module.fail_json(msg='unable to connect to {}'.format(args['host']))
    return

  timeout = int(args['timeout'])
  if timeout > 0: dev.timeout = timeout
  results = junos_install_config(module, dev)
  dev.close()
  module.exit_json(**results)

from ansible.module_utils.basic import *
main()

